{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","p","path","id","className","s","dialog","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsState","dialogsPage","dD","dialogsData","mD","messagesData","dialogsElements","map","n","messagesElements","m","isAuth","dialogs","dialogsItems","messanges","value","sendMessage","newMessageBody","compose","connect","state","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,UAAY,6B,oBCA/ID,EAAOC,QAAU,CAAC,OAAS,6B,oBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,+FCWbC,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAEE,GAC3B,OACE,qBAAKC,UAAWC,IAAEC,OAAlB,SACE,eAAC,IAAD,CAASC,GAAIL,EAAb,cAAqBD,EAAEO,W,kBCGdC,EARC,SAACR,GACf,OACE,mCACE,qBAAKG,UAAWC,IAAEK,QAAlB,SAA4BT,EAAES,a,yCC8B9BC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAlBL,SAACE,GACtB,OACE,uBAAMC,SAAUD,EAAME,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAU,CAACC,IAAUZ,GACrBa,YAAY,qBACZhB,KAAK,qBAGT,8BACE,0DASOiB,EAjDC,SAACT,GACf,IAAIU,EAAeV,EAAMW,YACrBC,EAAKF,EAAaG,YAClBC,EAAKJ,EAAaK,aAElBC,EAAkBJ,EAAGK,KAAI,SAACC,GAAD,OAC3B,cAAC,EAAD,CAAY1B,KAAM0B,EAAE1B,KAAiBL,GAAI+B,EAAE/B,IAAZ+B,EAAE/B,OAE/BgC,EAAmBL,EAAGG,KAAI,SAACG,GAAD,OAC5B,cAAC,EAAD,CAAS1B,QAAS0B,EAAE1B,QAAoBP,GAAIiC,EAAEjC,IAAZiC,EAAEjC,OAOtC,OAAKa,EAAMqB,OAET,sBAAKjC,UAAWC,IAAEiC,QAAlB,UACE,qBAAKlC,UAAWC,IAAEkC,aAAlB,SAAiCP,IACjC,qBAAK5B,UAAWC,IAAEmC,UAAlB,SAA8BL,IAC9B,cAACtB,EAAD,CAAqBI,SATH,SAACwB,GACrBzB,EAAM0B,YAAYD,EAAME,sBAGA,cAAC,IAAD,CAAUpC,GAAI,Y,iCCkB3BqC,sBACbC,aAdoB,SAACC,GACrB,MAAO,CACLnB,YAAamB,EAAMnB,gBAGE,SAACoB,GACxB,MAAO,CACLL,YAAa,SAACC,GACZI,EAASC,YAAmBL,SAOhCM,IAFaL,CAGbnB","file":"static/js/3.bcade978.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Ig-t\",\"dialogsItems\":\"Dialogs_dialogsItems__1puaG\",\"active\":\"Dialogs_active__3umEF\",\"messanges\":\"Dialogs_messanges__20qwq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__-ENoV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3E_Jm\"};","import { NavLink } from 'react-router-dom';\r\nimport s from './DialogItem.module.css';\r\n\r\nconst DialogItem = (p) => {\r\n  let path = '/dialogs/' + p.id;\r\n  return (\r\n    <div className={s.dialog}>\r\n      <NavLink to={path}> {p.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import s from './Message.module.css';\r\n\r\nconst Message = (p) => {\r\n  return (\r\n    <>\r\n      <div className={s.message}>{p.message}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","// import { NavLink } from 'react-router-dom';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem.jsx';\r\nimport Message from './Message/Message.jsx';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n  let dialogsState = props.dialogsPage;\r\n  let dD = dialogsState.dialogsData;\r\n  let mD = dialogsState.messagesData;\r\n\r\n  let dialogsElements = dD.map((n) => (\r\n    <DialogItem name={n.name} key={n.id} id={n.id} />\r\n  ));\r\n  let messagesElements = mD.map((m) => (\r\n    <Message message={m.message} key={m.id} id={m.id} />\r\n  ));\r\n\r\n  const addNewMessage = (value) => {\r\n    props.sendMessage(value.newMessageBody);\r\n  };\r\n\r\n  if (!props.isAuth) return <Redirect to={'/login'} />;\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messanges}>{messagesElements}</div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n          placeholder=\"Enter your message\"\r\n          name=\"newMessageBody\"\r\n        ></Field>\r\n      </div>\r\n      <div>\r\n        <button>SEND MESSAGE</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(\r\n  AddMessageForm\r\n);\r\nexport default Dialogs;\r\n","import Dialogs from './Dialogs';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect.js';\r\nimport { compose } from 'redux';\r\n// const DialogsContainer = () => {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {(store) => {\r\n//         let dialogsState = store.getState().dialogsPage;\r\n\r\n//         const onSendMessageClick = () => {\r\n//           store.dispatch(sendMessageCreator());\r\n//         };\r\n\r\n//         const onNewMessageChange = (body) => {\r\n//           store.dispatch(updateNewMessageBodyCreator(body));\r\n//         };\r\n//         return (\r\n//           <Dialogs\r\n//             updateNewMessageBody={onNewMessageChange}\r\n//             sendMessage={onSendMessageClick}\r\n//             dialogsPage={dialogsState}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// };\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}